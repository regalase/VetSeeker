@model ISPROJ2VetSeeker.Models.ClinicModel
@{
    ViewBag.Title = "Register Clinic";
    Layout = "~/Views/Shared/_LayoutVet.cshtml";
}


@Styles.Render("~/Content/StyleSheetPetRegister.css")
<link href="~/Content/StyleSheetPetRegister.css" rel="stylesheet" type="text/css" />
<style>


    #map {
        height: 200% !important;
        width: 85% !important;
        margin-left: 55px;
        position: absolute !important;
    }
</style>
<script>
    let map;
    let marker;
    let cityLongLatMap = {
        "Makati": { "latitude": 14.5547, "longitude": 121.0244 },
        "Manila": { "latitude": 14.5995, "longitude": 120.9842 },
        "Quezon City": { "latitude": 14.6760, "longitude": 121.0437 },
        "Caloocan": { "latitude": 14.7566, "longitude": 121.0450 },
        "Pasay": { "latitude": 14.5378, "longitude": 121.0014 },
        "Pasig": { "latitude": 14.5764, "longitude": 121.0851 },
        "Taguig": { "latitude": 14.5176, "longitude": 121.0509 },
        "Navotas": { "latitude": 14.6732, "longitude": 120.9350 },
        "Muntinlupa": { "latitude": 14.4081, "longitude": 121.0415 },
        "Mandaluyong": { "latitude": 14.5794, "longitude": 121.0359 },
        "Valenzuela": { "latitude": 14.703580, "longitude": 120.986542 },
        "Malabon": { "latitude": 14.6681, "longitude": 120.9658 },
        "San Juan": { "latitude": 14.6019, "longitude": 121.0355 },
        "Marikina": { "latitude": 14.6507, "longitude": 121.1029 },
        "Pateros": { "latitude": 14.5454, "longitude": 121.0687 },
        "Paranaque": { "latitude": 14.4793, "longitude": 121.0198 },
        "Bonifacio Global City": { "latitude": 14.5409, "longitude": 121.0503 }

    }
    const PHILIPPINE_BOUNDS = {
        north: 14.785616325499253,
        south: 14.426811626582813,
        west: 120.61145466065766,
        east: 121.4766280005014
    };
    function initMap() {
        map = new google.maps.Map(document.getElementById("map"), {
            center: { lat: 14.6090537, lng: 121.02225650000003 },  //lat: 14.5547, lng: 121.0244 
            restriction: {
              latLngBounds: PHILIPPINE_BOUNDS,
              strictBounds: false,
            },
            zoom: 12,
            panControl: false,
            streetViewControl: false,
            mapTypeId: google.maps.MapTypeId.ROADMAP
        });

        marker = new google.maps.Marker({
            map: map,
            position: { lat: 14.6090537, lng: 121.02225650000003 },
            draggable: true
        });

        google.maps.event.addListener(marker, 'dragend', function () {
            map.setCenter(marker.getPosition());
            const latitude = marker.getPosition().lat();
            const longitude = marker.getPosition().lng();
            document.getElementById("Latitude").value = latitude;
            document.getElementById("Longitude").value = longitude;
            var latlng = {lat: parseFloat(latitude), lng: parseFloat(longitude)};
            var geocoder = new google.maps.Geocoder;
            geocoder.geocode({'location': latlng}, function(results, status) {
                if (status === google.maps.GeocoderStatus.OK) {
                    if (results[1]) {
                        const place_id = results[1].place_id;
                        geocoder.geocode({ placeId: place_id })
                        .then(({ results }) => {
                            if (results[0]) {
                                console.log(results[0]);
                                console.log(results[0].address_components[0].long_name, results[0].address_components[1].long_name);
                                    document.getElementById("id").value = results[0].address_components[0].long_name;
                                    document.getElementById("streetId").value = results[0].address_components[1].long_name;
                                cityLongLatMap[results[0].address_components[2].long_name];
                                //cityLongLatMap["Makati", "Manila", "Quezon City", "Caloocan", "Pasay", "Pasig", "Taguig", "Navotas", "Muntinlupa", "Mandaluyong", "Valenzuela", "Malabon", "San Juan", "Marikina", "Pateros", "Paranaque", "Bonifacio Global City"];
                                const output1 = cityLongLatMap[results[0].address_components[1].long_name];
                                const output2 = cityLongLatMap[results[0].address_components[2].long_name];
                                const output3 = cityLongLatMap[results[0].address_components[3].long_name];
                                //const output = cityLongLatMap[results[0].address_components['locality'].types];
                                if (output1 == null && output2 == null && output3 == null) {
                                    initMap();
                                    document.getElementById("id").value = "";
                                    document.getElementById("streetId").value = "";
                                }
                                console.log(cityLongLatMap);
                                console.log(results[0].address_components[2].long_name);
                                console.log(results[0].address_components[3].long_name);
                            } else {
                            window.alert("No results found");
                            }
                        }).catch((e) => window.alert("Geocoder failed due to: " + e));
                    } 
                    else {
                        window.alert('No results found');
                    }
                } else {
                     window.alert('Geocoder failed due to: ' + status);
                }    
            });
        });
        google.maps.event.trigger(map, "resize");

        
    }

    function changeMapMarker(value) {
        var longitude = cityLongLatMap[value].longitude;
        var latitude = cityLongLatMap[value].latitude;
        document.getElementById("Longitude").value = longitude;
        document.getElementById("Latitude").value = latitude;
        var position = new google.maps.LatLng(latitude, longitude);
        marker.setPosition(position)
        map.setCenter(position);
    }

    

</script>
@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()

    <div class="form-horizontal">
        <h2 style="text-align:center">Create Clinic</h2>
        <br />
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        <div class="Create">
            <div class="col-lg-1"></div>
            <div class="col-lg-5">

                <div class="form-group">
                    <span class="control-label" style="font-weight:700; padding-right:180px;">Clinic Name</span>
                    <div class="col-md-10">
                        @Html.EditorFor(model => model.ClinicName, new { htmlAttributes = new { @class = "form-control", required = "required" } })
                        @Html.ValidationMessageFor(model => model.ClinicName, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.UnitHouseNo, htmlAttributes: new { @class = "control-label" })
                    <div class="col-md-10">
                        @Html.EditorFor(model => model.UnitHouseNo, new { htmlAttributes = new { @class = "form-control", id = "id" } })
                        @Html.ValidationMessageFor(model => model.UnitHouseNo, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.Street, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        @Html.EditorFor(model => model.Street, new { htmlAttributes = new { @class = "form-control", required = "required", id = "streetId" } })
                        @Html.ValidationMessageFor(model => model.Street, "", new { @class = "text-danger" })
                    </div>
                </div>
            </div>
            <div class="col-lg-5">
                <div class="form-group">
                    @Html.LabelFor(model => model.ClinicEmail, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        @Html.EditorFor(model => model.ClinicEmail, new { htmlAttributes = new { @class = "form-control", required = "required" } })
                        @Html.ValidationMessageFor(model => model.ClinicEmail, "", new { @class = "text-danger" })
                    </div>
                </div>
                <div class="form-group">
                    @Html.LabelFor(model => model.ClinicContactNo, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        @Html.EditorFor(model => model.ClinicContactNo, new { htmlAttributes = new { @class = "form-control", required = "required" } })
                        @Html.ValidationMessageFor(model => model.ClinicContactNo, "", new { @class = "text-danger" })
                    </div>
                </div>
                <div class="form-group">
                    @Html.LabelFor(model => model.Baranggay, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        @Html.EditorFor(model => model.Baranggay, new { htmlAttributes = new { @class = "form-control", required = "required" } })
                        @Html.ValidationMessageFor(model => model.Baranggay, "", new { @class = "text-danger" })
                    </div>
                </div>
                <div class="form-group">
                    <!--Drop Down List for cities-->
                    @{ List<SelectListItem> listItems = new List<SelectListItem>();
                        listItems.Add(new SelectListItem { Text = "Makati" });
                        listItems.Add(new SelectListItem { Text = "Manila" });
                        listItems.Add(new SelectListItem { Text = "Quezon City" });
                        listItems.Add(new SelectListItem { Text = "Caloocan" });
                        listItems.Add(new SelectListItem { Text = "Pasay" });
                        listItems.Add(new SelectListItem { Text = "Pasig" });
                        listItems.Add(new SelectListItem { Text = "Taguig" });
                        listItems.Add(new SelectListItem { Text = "Navotas" });
                        listItems.Add(new SelectListItem { Text = "Muntinlupa" });
                        listItems.Add(new SelectListItem { Text = "Mandaluyong" });
                        listItems.Add(new SelectListItem { Text = "Valenzuela" });
                        listItems.Add(new SelectListItem { Text = "Malabon" });
                        listItems.Add(new SelectListItem { Text = "San Juan" });
                        listItems.Add(new SelectListItem { Text = "Marikina" });
                        listItems.Add(new SelectListItem { Text = "Pateros" });
                        listItems.Add(new SelectListItem { Text = "Paranaque" });
                        listItems.Add(new SelectListItem { Text = "Bonifacio Global City" }); }
                    @Html.LabelFor(model => model.City, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        @Html.DropDownListFor(model => model.City, listItems, "Select a City", new { htmlAttributes = new { @class = "form-control" }, onchange = "changeMapMarker(this.value)", style = "width:225px;font-size:15px;", required = "required" })
                        @Html.ValidationMessageFor(model => model.City, "", new { @class = "text-danger" })
                    </div>
                </div>
            </div>

            <div class="col-lg-1"></div>
            <div class="col-lg-12" style="margin-bottom:275px;">
                <!--Calls map from Google API-->
                <div class="form-group">
                    <div>Pin your Clinic Location</div>
                    <div id="map"></div>
                    <script src="https://maps.googleapis.com/maps/api/js?key=AIzaSyCdKWIdIY9R5PNi_RYI3NU5TcF4KR4eLOE&callback=initMap&v=weekly&channel=2" async></script>
                </div>

                <div class="form-group" style="visibility:hidden">
                    @Html.LabelFor(model => model.Latitude, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        @Html.EditorFor(model => model.Latitude, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.Latitude, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group" style="visibility:hidden">
                    @Html.LabelFor(model => model.Longitude, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        @Html.EditorFor(model => model.Longitude, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.Longitude, "", new { @class = "text-danger" })
                    </div>
                </div>
            </div>
            <div class="form-group">
                <div class="col-md-offset-1 col-md-10" style="margin-top:20px">
                    <input type="submit" value="Create" class="btn btn-default" />
                </div>
            </div>
        </div>
    </div>
}



@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
}
